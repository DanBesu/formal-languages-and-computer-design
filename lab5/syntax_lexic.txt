program ::= {statement}
statement ::= {decl_stmt | assign_stmt | if_stmt | for_stmt | print stmt}
decl_stmt ::= type identifier  (expression | const | arr_value) 
assign_stmt ::= identifier “=“ (expression | const | arr_value)
if_stmt ::= “saZicemCa” “(“ condition ”)” “{“ statement “}”  “dacaNu” “{“ statement "}"
for_stmt ::= “pleaca” “(“ type indentifier “deLa” (identifier | nr_value) “,” “panaLa” (identifier | nr_value) “,” nr_value “)” “{“ statement "}"
print_stmt ::= “arata” (identifier | const) 

type := ridicaNumar | parere | cuvant
expression ::= expression "+" term | expression "-" term | term
term ::= term "*" factor | term "/" factor | factor
factor ::= "(" expression ")" | identifier | nr_value
const ::= str_value | nr_value | boolean_value

Alphabet:
	upper and lower case letters of the English Alphabet (A - Z, a - z)
	decimal digits (0 - 9)
	
Lexic:
	Special symbols, representing:
		- operators: + - * / < > = >= =< “
		- separators {} [] () ; space newline ,
		- reserved words: ridicaNumar, cuvant, parere, baga, arata, saZicemCa, dacaNu, arFi, nuArFi, seImparteLa, pleaca, deLa, panaLa, gata, adevarat, fals
		-identifier: {letter|digit}
		- leter = “A” | “B” | … | “Z” | “a” | “b” | … | “z”
 		- digit = “0” | “1” | … | “9”
		- not_zero_digit = “1” | “2” | … | “9”
               - nr_value = (“+” | “-”) not_zero_digit{digit}
		- string_value = “ “ “(letter | digit) {letter | digit | “ ”} ” “ “
		- array_value = “[“ nr_value {“,” nr_value} “]”
		- boolean_value = adevarat | fals